class Sudoku(object):

    def __init__(self):
        super().__init__()

    @staticmethod
    def cross(A, B):
        "Cross product of elements in A and elements in B."
        return [s + t for s in A for t in B]

    @classmethod
    def grid_values(cls, grid):
        """
        Convert grid into a dict of {square: char} with '123456789' for empties.
        Args:
            grid(string) - A grid in string form.
        Returns:
            A grid in dictionary form
                Keys: The boxes, e.g., 'A1'
                Values: The value in each box, e.g., '8'. If the box has no value, then the value will be '123456789'.
        """
        values = []
        all_digits = '123456789'
        for c in grid:
            if c == '.':
                values.append(all_digits)
            elif c in all_digits:
                values.append(c)
        assert len(values) == 81
        return dict(zip(cls.boxes, values))

